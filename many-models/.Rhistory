# For the most part the life expectancy seems to increase over time, but there
# are exceptions to this rule. We can try to capture the pattern by fitting a
# linear model for each of the countries and then analyze the residuals. For one
# country this is easy:
nz <- filter(gapminder, country == "New Zealand")
nz %>%
ggplot(aes(year, lifeExp)) +
geom_line() +
ggtitle("Full data = ")
nz_mod <- lm(lifeExp ~ year, data = nz)
nz %>%
add_predictions(nz_mod) %>%
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Linear trend + ")
?add_predictions
nz_mod <- lm(lifeExp ~ year, data = nz)
nz %>%
add_predictions(nz_mod) %>%             # This is from the modelr-package.
ggplot(aes(year, pred)) +
geom_line() +
ggtitle("Linear trend + ")
nz %>%
add_residuals(nz_mod) %>%               # This is also from the modelr-package.
ggplot(aes(year, resid)) +
geom_hline(yintercept = 0, colour = "white", size = 3) +
geom_line() +
ggtitle("Remaining pattern")
?nest
# The problem is that we want to fit this data to every contry of the world.
# There are ways to do this with what we learned in BAN420 in a fairly compact
# way, for example by defining a function that fits the model for a given
# country and extracts the information that we need, and then we can perhaps
# fill an empty data frame using a for-loop. We can do this in a much neater way
# still, and start by creating a nested data frame:
by_country <- gapminder %>%
group_by(country, continent) %>%
nest()                                   # From the tidyr-package
# Now we have one row per country. Grouping by continent just makes sure that
# the continent variable is not included in the nesting.
by_country
by_country %>%
filter(country == "Afghanistan")
by_country %>%
filter(country == "Afghanistan") %>%
select(data)
by_country %>%
filter(country == "Afghanistan") %>%
ungroup()
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(data)
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(data) %>%
pull
?map
# Let us define a function that fits the model to the country-specific data
# frame, that we can supply to the map()-function afterwards:
country_model <- function(df) {
lm(lifeExp ~ year, data = df)
}
# Fit the linear model to each country:
models <- map(by_country$data, country_model)
models
# This returns a model object for each country as an element in a list. But
# given that we are able to store the country specific data-frames in a column
# in a data frame with one country per row, wouldn't it be nice if we can just
# store the model object in the same data frame as well? We can du that easily
# by putting the mapping inside a mutate, that creates this column for us:
by_country <-
by_country %>%
mutate(model = map(data, country_model))
by_country
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan")
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model)
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
summary
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
tidy
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
tidymodels::tidy
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>% pull
?unlist
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist(recursive = FALSE)
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist(recursive = FALSE) %>%
summary
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist(recursive = FALSE) %>%
tidy
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist(recursive = FALSE) %>%
tidymodels::tidy
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist(recursive = FALSE)
install.packages(("broom"))
install.packages(("broom"))
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist(recursive = FALSE) %>%
broom::tidy
library(modelr)                 # Integrate modeling into the workflow
library(tidyverse)              # Data wrangling and visualization
library(gapminder)
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist(recursive = FALSE) %>%
broom::tidy
library(broom)
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull %>%
unlist(recursive = FALSE) %>%
tidy
by_country %>%
filter(country == "Afghanistan") %>%
ungroup() %>%
select(model) %>%
pull
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
tidy(model)
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
pluck(model)
by_country
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
pluck("model")
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
pluck("model", 1)
# That was convenient! The models are now correctly associated with the
# countries, and we can juggle them around using the normal data wrangling tools
# that we already know. We can easily extract individual models:
by_country %>%
filter(country == "Afghanistan") %>%
pluck("model", 1) %>%
summary
?map2
?map
# We then want to add the residuals to each of the country-specific data sets.
# We use the map2()-function because we can then specify first the data frame
# and then the column that we are goint to loop over:
by_country <- by_country %>%
mutate(
resids = map2(data, model, add_residuals)
)
?unnest
unnest(by_country)
# For plotting, it is now convenient to unnest the results. This results in a
# data frame that has now returns to the one-country-per-year-format (including
# the new residuals), but also with copies of the nested data and the linear
# models in each row:
resids <- unnest(by_country, resids)
by_country
resids
resids %>%
ggplot(aes(year, resid)) +
geom_line(aes(group = country), alpha = 1 / 3) +
geom_smooth(se = FALSE)
# ... or by continent:
resids %>%
ggplot(aes(year, resid, group = country)) +
geom_line(alpha = 1 / 3) +
facet_wrap(~continent)
library(broom)                  # Analyzing models
# The broom-package contains tools for easily extracting diagnostics from a
# model:
broom::glance(nz_mod)
by_country %>%
mutate(glance = map(model, broom::glance))
by_country %>%
mutate(glance = map(model, broom::glance))
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance)
# We can the apply this to all the models in our data frame, and then unnest:
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = TRUE)
?unnest
# We can the apply this to all the models in our data frame, and then unnest:
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
unnest(glance, .drop = TRUE)
# We can the apply this to all the models in our data frame, and then unnest:
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
select(-data,-model, -resids) %>%
unnest(glance)
# We can then start to look for models that do not fit very well:
glance %>%
arrange(r.squared)
# We can the apply this to all the models in our data frame, and then unnest:
diagnostics <-
by_country %>%
mutate(glance = map(model, broom::glance)) %>%
select(-data,-model, -resids) %>%
unnest(glance)
# We can then start to look for models that do not fit very well:
diagnostics %>%
arrange(r.squared)
# The worst fits seem to be for African countries:
glance %>%
ggplot(aes(continent, r.squared)) +
geom_jitter(width = 0.5)
# The worst fits seem to be for African countries:
diagnostics%>%
ggplot(aes(continent, r.squared)) +
geom_jitter(width = 0.5)
# The worst fits seem to be for African countries:
diagnostics %>%
ggplot(aes(x = continent, y = r.squared, colour = continent)) +
geom_jitter(width = 0.5)
# We can pull out the countries with the worst fit, and look at them
# specifically:
bad_fit <- filter(glance, r.squared < 0.25)
gapminder %>%
semi_join(bad_fit, by = "country") %>%
ggplot(aes(year, lifeExp, colour = country)) +
geom_line()
# We can pull out the countries with the worst fit, and look at them
# specifically:
bad_fit <- filter(diagnostics, r.squared < 0.25)
?semi_join
gapminder %>%
semi_join(bad_fit, by = "country")
gapminder %>%
semi_join(bad_fit, by = "country") %>%            # This is a *filter*
ggplot(aes(year, lifeExp, colour = country)) +
geom_line()
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
# The question that we will explore in this tutorial is the following: How does
# life expectancy change over time for each country? We start with a plot:
gapminder %>%
ggplot(aes(year, lifeExp, group = country, colour = continent)) +
geom_line(alpha = 1/3)
augment(nz, nz_mod)
augment(nz_mod, nz)
library(tidyverse)
setwd("~/repos/ban400-lectures/many-models")
countries <-
read_csv("growth.csv", sep = ";")
library(readr)
countries <-
read_csv("growth.csv", sep = ";")
countries <-
read_csv("growth.csv")
countries <-
read_delim("growth.csv", delim = ";")
countries <-
read_delim("growth.csv", delim = ";") %>%
mutate(growth = (lbnppc_1996-lbnppc_1960)/(1996-1960)) %>%
select(-lbnppc_2014, -skole_p_1996) %>%
drop_na
# The basic regression. None of the variables are significant.
summary(lm(growth ~ lbnppc_1960 + gruve_1960, data = df))
# The basic regression. None of the variables are significant.
summary(lm(growth ~ lbnppc_1960 + gruve_1960, data = countries))
countries
countries %>%
mutate(reg_data = .)
countries %>%
mutate(., reg_data = .)
?mutate
countries %>%
mutate(., reg_data = (. %>% filter(country != country)) )
countries %>%
mutate(reg_data = country)
countries %>%
mutate(reg_data = countries)
drop_country <- function(data, drop) {
data %>% filter(country =! drop)
}
countries %>%
mutate(reg_data = map(countries, land))
drop_country <- function(data, drop) {
data %>% filter(country =! drop)
}
countries %>%
mutate(reg_data = map2(countries, land, drop_country))
drop_country <- function(data, drop) {
data %>% filter(land =! drop)
}
countries %>%
mutate(reg_data = map2(countries, land, drop_country))
drop_country(countries, "Norway")
drop_country <- function(data, drop) {
data %>% filter(land != drop)
}
drop_country(countries, "Norway")
countries %>%
mutate(reg_data = map2(countries, land, drop_country))
?map2
?map
drop_country <- function(drop, data) {
data %>% filter(land != drop)
}
countries %>%
mutate(reg_data = map(land, drop_country, data = countries))
countries <-
countries %>%
mutate(reg_data = map(land, drop_country, data = countries))
countries
drop_country <- function(drop) {
countries %>% filter(land != drop)
}
countries <-
countries %>%
mutate(reg_data = map(land, drop_country))
fit_regression <- function(dat) {
lm(growth ~ lbnppc_1960 + gruve_1960, data = dat)
}
countries <-
read_delim("growth.csv", delim = ";") %>%
mutate(growth = (lbnppc_1996-lbnppc_1960)/(1996-1960)) %>%
select(-lbnppc_2014, -skole_p_1996) %>%
drop_na
countries <-
countries %>%
mutate(reg_data = map(land, drop_country)) %>%
mutate(model = map(reg_data, fit_regression))
countries
countries$model[[1]]
tidy(countries$model[[1]])
countries <-
countries %>%
mutate(reg_data = map(land, drop_country)) %>%
mutate(model = map(reg_data, fit_regression)) %>%
mutate(coeff = tidy(model))
countries <-
countries %>%
mutate(reg_data = map(land, drop_country)) %>%
mutate(model = map(reg_data, fit_regression)) %>%
mutate(coeff = map(model, tidy))
countries <-
read_delim("growth.csv", delim = ";") %>%
mutate(growth = (lbnppc_1996-lbnppc_1960)/(1996-1960)) %>%
select(-lbnppc_2014, -skole_p_1996) %>%
drop_na
countries <-
countries %>%
mutate(reg_data = map(land, drop_country)) %>%
mutate(model = map(reg_data, fit_regression)) %>%
mutate(coeff = map(model, tidy)) %>%
unnest(coeff)
countries <-
read_delim("growth.csv", delim = ";") %>%
mutate(growth = (lbnppc_1996-lbnppc_1960)/(1996-1960)) %>%
select(-lbnppc_2014, -skole_p_1996) %>%
drop_na
jackknife_coef <-
countries %>%
mutate(reg_data = map(land, drop_country)) %>%
mutate(model = map(reg_data, fit_regression)) %>%
mutate(coeff = map(model, tidy)) %>%
unnest(coeff)
jackknife_coef
jackknife_coef <-
countries %>%
mutate(reg_data = map(land, drop_country)) %>%
mutate(model = map(reg_data, fit_regression)) %>%
mutate(coeff = map(model, tidy)) %>%
unnest(coeff) %>%
select(landkode, land, term, estimate)
jackknife_coef
jackknife_coef %>%
filter(term == "lbnppc_1960") %>%
ggplot(aes(x = estimate)) %>%
geom_histogram()
jackknife_coef %>%
filter(term == "lbnppc_1960") %>%
ggplot(aes(x = estimate)) +
geom_histogram()
jackknife_coef %>%
filter(term == "gruve_1960") %>%
ggplot(aes(x = estimate)) +
geom_histogram()
