play(player = 1) %>%
play(player = 2) %>%
clear()
if(check_finished(status))  break()
while(status$draw) {
war <- TRUE
status <-
status %>%
play_for_war() %>%
clear()
if(check_finished(status))  break()
}
# Update tracking info
logg <-
logg %>%
bind_rows(tibble(iteration = iteration,
p1_cards =
status[[1]]$hand %>% nrow + status[[1]]$stack %>% nrow,
p2_cards =
status[[2]]$hand %>% nrow + status[[2]]$stack %>% nrow,
p1_avg =
c(status[[1]]$hand$n, status[[1]]$stack$n) %>% mean,
p2_avg =
c(status[[2]]$hand$n, status[[2]]$stack$n) %>% mean,
war = war))
}
cards <-
logg %>%
mutate(war = ifelse(.$war, yes = 26, no = NA)) %>%
ggplot() +
geom_line(aes(x = iteration, y = p1_cards)) +
geom_line(aes(x = iteration, y = p2_cards), linetype = "dashed") +
geom_point(aes(x = iteration, y = war), colour = "red", size = 2) +
xlab("Stikk") + ylab("Antall kort") +
theme_bw()
gjsnitt <-
logg %>%
mutate(war = ifelse(.$war, yes = 0, no = NA)) %>%
ggplot() +
geom_line(aes(x = iteration, y = p1_avg)) +
geom_line(aes(x = iteration, y = p2_avg), linetype = "dashed") +
xlab("Stikk") + ylab("Gjennomsnittsverdi") +
theme_bw()
cards / gjsnitt
# Deal out the cards to each player
status <- deal()
iteration <- 0
# Make a df for keeping track of the status of the game
logg <- tibble(iteration = iteration,
p1_cards = status[[1]]$hand %>% nrow,
p2_cards = status[[2]]$hand %>% nrow,
p1_avg = status[[1]]$hand$n %>% mean,
p2_avg = status[[2]]$hand$n %>% mean,
war = NA)
while(!check_finished(status)) {
war <- FALSE
iteration <- iteration + 1
status <-
status %>%
play(player = 1) %>%
play(player = 2) %>%
clear()
if(check_finished(status))  break()
while(status$draw) {
war <- TRUE
status <-
status %>%
play_for_war() %>%
clear()
if(check_finished(status))  break()
}
# Update tracking info
logg <-
logg %>%
bind_rows(tibble(iteration = iteration,
p1_cards =
status[[1]]$hand %>% nrow + status[[1]]$stack %>% nrow,
p2_cards =
status[[2]]$hand %>% nrow + status[[2]]$stack %>% nrow,
p1_avg =
c(status[[1]]$hand$n, status[[1]]$stack$n) %>% mean,
p2_avg =
c(status[[2]]$hand$n, status[[2]]$stack$n) %>% mean,
war = war))
}
cards <-
logg %>%
mutate(war = ifelse(.$war, yes = 26, no = NA)) %>%
ggplot() +
geom_line(aes(x = iteration, y = p1_cards)) +
geom_line(aes(x = iteration, y = p2_cards), linetype = "dashed") +
geom_point(aes(x = iteration, y = war), colour = "red", size = 2) +
xlab("Stikk") + ylab("Antall kort") +
theme_bw()
gjsnitt <-
logg %>%
mutate(war = ifelse(.$war, yes = 0, no = NA)) %>%
ggplot() +
geom_line(aes(x = iteration, y = p1_avg)) +
geom_line(aes(x = iteration, y = p2_avg), linetype = "dashed") +
xlab("Stikk") + ylab("Gjennomsnittsverdi") +
theme_bw()
cards / gjsnitt
# Deal out the cards to each player
status <- deal()
iteration <- 0
# Make a df for keeping track of the status of the game
logg <- tibble(iteration = iteration,
p1_cards = status[[1]]$hand %>% nrow,
p2_cards = status[[2]]$hand %>% nrow,
p1_avg = status[[1]]$hand$n %>% mean,
p2_avg = status[[2]]$hand$n %>% mean,
war = NA)
while(!check_finished(status)) {
war <- FALSE
iteration <- iteration + 1
status <-
status %>%
play(player = 1) %>%
play(player = 2) %>%
clear()
if(check_finished(status))  break()
while(status$draw) {
war <- TRUE
status <-
status %>%
play_for_war() %>%
clear()
if(check_finished(status))  break()
}
# Update tracking info
logg <-
logg %>%
bind_rows(tibble(iteration = iteration,
p1_cards =
status[[1]]$hand %>% nrow + status[[1]]$stack %>% nrow,
p2_cards =
status[[2]]$hand %>% nrow + status[[2]]$stack %>% nrow,
p1_avg =
c(status[[1]]$hand$n, status[[1]]$stack$n) %>% mean,
p2_avg =
c(status[[2]]$hand$n, status[[2]]$stack$n) %>% mean,
war = war))
}
cards <-
logg %>%
mutate(war = ifelse(.$war, yes = 26, no = NA)) %>%
ggplot() +
geom_line(aes(x = iteration, y = p1_cards)) +
geom_line(aes(x = iteration, y = p2_cards), linetype = "dashed") +
geom_point(aes(x = iteration, y = war), colour = "red", size = 2) +
xlab("Stikk") + ylab("Antall kort") +
theme_bw()
gjsnitt <-
logg %>%
mutate(war = ifelse(.$war, yes = 0, no = NA)) %>%
ggplot() +
geom_line(aes(x = iteration, y = p1_avg)) +
geom_line(aes(x = iteration, y = p2_avg), linetype = "dashed") +
xlab("Stikk") + ylab("Gjennomsnittsverdi") +
theme_bw()
cards / gjsnitt
# Deal out the cards to each player
status <- deal()
iteration <- 0
# Make a df for keeping track of the status of the game
logg <- tibble(iteration = iteration,
p1_cards = status[[1]]$hand %>% nrow,
p2_cards = status[[2]]$hand %>% nrow,
p1_avg = status[[1]]$hand$n %>% mean,
p2_avg = status[[2]]$hand$n %>% mean,
war = NA)
while(!check_finished(status)) {
war <- FALSE
iteration <- iteration + 1
status <-
status %>%
play(player = 1) %>%
play(player = 2) %>%
clear()
if(check_finished(status))  break()
while(status$draw) {
war <- TRUE
status <-
status %>%
play_for_war() %>%
clear()
if(check_finished(status))  break()
}
# Update tracking info
logg <-
logg %>%
bind_rows(tibble(iteration = iteration,
p1_cards =
status[[1]]$hand %>% nrow + status[[1]]$stack %>% nrow,
p2_cards =
status[[2]]$hand %>% nrow + status[[2]]$stack %>% nrow,
p1_avg =
c(status[[1]]$hand$n, status[[1]]$stack$n) %>% mean,
p2_avg =
c(status[[2]]$hand$n, status[[2]]$stack$n) %>% mean,
war = war))
}
cards <-
logg %>%
mutate(war = ifelse(.$war, yes = 26, no = NA)) %>%
ggplot() +
geom_line(aes(x = iteration, y = p1_cards)) +
geom_line(aes(x = iteration, y = p2_cards), linetype = "dashed") +
geom_point(aes(x = iteration, y = war), colour = "red", size = 2) +
xlab("Stikk") + ylab("Antall kort") +
theme_bw()
gjsnitt <-
logg %>%
mutate(war = ifelse(.$war, yes = 0, no = NA)) %>%
ggplot() +
geom_line(aes(x = iteration, y = p1_avg)) +
geom_line(aes(x = iteration, y = p2_avg), linetype = "dashed") +
xlab("Stikk") + ylab("Gjennomsnittsverdi") +
theme_bw()
cards / gjsnitt
# EXAMPLE 1: The 1854 cholera outbreak ---------
#
# This example is presented in "Modern Data Science with R" by Baumer, Kaplan
# and Horton. The sp and rgdal-packages have been replaced by the sf-package.
library(mdsr)        # Companion R package to the book, containing data
library(sf)          # For spatial data, co-authoured by NHH Prof. Roger Bivand
library(ggmap)       # For drawing static maps as ggplots
library(tidyverse)   # Data wrangling etc
plot(CholeraDeaths)  # Simple plot of the data
setwd("~/repositories/ban400-lectures/maps")
# Download the file "rtwilson.com/downloads/SnowGIS_SHP.zip" and extract to your
# working directory. This is the cholera data as shapefiles:
folder <- "SnowGIS_SHP/SnowGIS_SHP"     # The folder containing the shapefiles.
list.files(folder)                      # List the files in the folders
st_layers(folder)                       # List the "layers" in this folder (sets
# We will begin by loading in the "Cholera_Deaths"-layer
ColeraDeaths <- read_sf(folder, layer = "Cholera_Deaths")
summary(ColeraDeaths)
# Extract the coordinates of the points and plot in a coordinate system:
cholera_coords <- as_tibble(st_coordinates(ColeraDeaths))
ggplot(cholera_coords) +
geom_point(aes(x = X, y = Y)) +
coord_quickmap()
# This is still just a very basic plot of the locations of the points in our
# data set on a coordinate system with some sort of logintude and latitude on
# the axes. We want to overlay this on a map. We can download this map as a
# ggplot using the ggmap-package. In order to do that, we need to specify the
# square that we want to download, but note that the coordinates in the data is
# not in the lat/lon-format:
cholera_coords
# The map-tiles that we will download later however come in the EPSG:4326-format,
# so let us try to convert the cholera data to that format:
cholera_latlon <-
CholeraDeaths %>%
st_transform(st_crs("+init=epsg:4326")) %>%
st_coordinates %>%
as_tibble %>%
mutate(Count = ColeraDeaths$Count)     # Add the counts back in to the data
# Define the box and download map:
london <- make_bbox(cholera_latlon$X,
cholera_latlon$Y,
f = .05)
m <- get_map(london, zoom = 17, source = "osm")
ggmap(m)
# Add the cholera data to the map:
ggmap(m) +
geom_point(aes(x = X, y = Y, size = Count), data = as_tibble(cholera_latlon))
# Check the system; no info unfortunately
st_crs(CholeraDeaths)$input
# Set coordinate system fisrst, then transform and plot.
cholera_latlon <-
CholeraDeaths %>%
st_set_crs("+init=epsg:27700") %>%
st_transform(st_crs("+init=epsg:4326")) %>%
st_coordinates %>%
as_tibble %>%
mutate(Count = ColeraDeaths$Count)
ggmap(m) +
geom_point(aes(x = X, y = Y, size = Count), data = cholera_latlon)
london <- make_bbox(cholera_latlon$X,
cholera_latlon$Y,
f = .05)
m <- get_map(london, zoom = 17, source = "osm")
ggmap(m) +
geom_point(aes(x = X, y = Y, size = Count), data = cholera_latlon)
water <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-05-04/water.csv")
world <- ne_countries(scale = "medium", returnclass = "sf")
# These packages contains shapefiles for the countries of the worls
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
water <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-05-04/water.csv")
world <- ne_countries(scale = "medium", returnclass = "sf")
tanzania <- world[world$name == "Tanzania",]
tan_data <-
water %>%
filter(country_name == "Tanzania") %>%
filter(lat_deg < 60)                   # Some weird data points
# Plot the country
ggplot(st_geometry(tanzania)) +
geom_sf()
# Add the water sources
ggplot(st_geometry(tanzania)) +
geom_sf() +
geom_point(aes(x = lon_deg, y = lat_deg),
data = tan_data)
# Make a nice map
library(firatheme)                # My favourite ggplot theme: https://github.com/vankesteren/firatheme
remotes::install_github("vankesteren/firatheme")
# Make a nice map
library(firatheme)                # My favourite ggplot theme: https://github.com/vankesteren/firatheme
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050"))
tan_roads <- read_sf("tanzania_roads")
tan_cities <-
read_sf("tanzania_places") %>%
filter(type == "city") %>%
select(name, geometry) %>%
drop_na() %>%
mutate(X = st_coordinates(.$geometry)[,1]) %>%
mutate(Y = st_coordinates(.$geometry)[,2])
tan_waterways <- read_sf("tanzania_waterways")
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050")) +
geom_sf(data = st_geometry(tan_roads), colour = "#00000050") +
geom_point(aes(x = X, y = Y), data = tan_cities, size = 2) +
geom_text(aes(x = X, y = Y, label = name),
data = tan_cities,
colour = "#999999",
position = "right")
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050")) +
geom_sf(data = st_geometry(tan_roads), colour = "#00000050") +
geom_point(aes(x = X, y = Y), data = tan_cities, size = 2) +
geom_text(aes(x = X, y = Y, label = name),
data = tan_cities,
colour = "#999999",
nudge_x = 0.05)
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050")) +
geom_sf(data = st_geometry(tan_roads), colour = "#00000050") +
geom_point(aes(x = X, y = Y), data = tan_cities, size = 2) +
geom_text(aes(x = X, y = Y, label = name),
data = tan_cities,
colour = "darkgoldenrod3",
nudge_x = 2)
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050")) +
geom_sf(data = st_geometry(tan_roads), colour = "#00000050") +
geom_point(aes(x = X, y = Y), data = tan_cities, size = 2) +
geom_text(aes(x = X, y = Y, label = name),
data = tan_cities,
colour = "darkgoldenrod4",
nudge_x = 0.5)
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050")) +
geom_sf(data = st_geometry(tan_roads), colour = "#00000050") +
geom_point(aes(x = X, y = Y), data = tan_cities, size = 2) +
geom_text(aes(x = X, y = Y, label = name),
data = tan_cities,
colour = "darkgoldenrod3",
nudge_y = 0.3)
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data,
alpha = .5) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050")) +
geom_sf(data = st_geometry(tan_roads), colour = "#00000050") +
geom_point(aes(x = X, y = Y), data = tan_cities, size = 2) +
geom_text(aes(x = X, y = Y, label = name),
data = tan_cities,
nudge_y = 0.3)
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data,
alpha = .5) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050")) +
geom_sf(data = st_geometry(tan_roads), colour = "#00000050") +
geom_point(aes(x = X, y = Y), data = tan_cities, size = 2) +
geom_text(aes(x = X, y = Y, label = name),
data = tan_cities,
nudge_y = 0.3) +
geom_sf(data = st_geometry(tan_waterways), colour = "darkblue")
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data,
alpha = .5) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050")) +
geom_sf(data = st_geometry(tan_roads), colour = "#00000050") +
geom_point(aes(x = X, y = Y), data = tan_cities, size = 2) +
geom_text(aes(x = X, y = Y, label = name),
data = tan_cities,
nudge_y = 0.3) +
geom_sf(data = st_geometry(tan_waterways), colour = "darkblue", alpha = .3)
?geom_sf
ggplot(st_geometry(tanzania)) +
geom_sf(fill = "#00000050") +
geom_point(aes(x = lon_deg, y = lat_deg, colour = water_source),
data = tan_data) +
xlab("") +
ylab("") +
labs(colour = "") +
ggtitle("Water sources in Tanzania") +
theme_fira() +
scale_colour_fira(na.value = "darkred") +
theme(axis.line = element_blank(),
panel.grid.major = element_line(colour = "#00000020",
inherit.blank = FALSE),
axis.text = element_text(colour = "#00000050"))
